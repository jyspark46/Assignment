mport java.net.*;
import java.io.*;
import java.util.*;

import java.text.SimpleDateFormat;
import java.util.Date;

public class ChatServer {
    
    public static void main(String[] args) {
        try{
            ServerSocket server = new ServerSocket(10001);
            System.out.println("Waiting connection...");
            HashMap hm = new HashMap();
            while(true){
                Socket sock = server.accept();
                ChatThread chatthread = new ChatThread(sock, hm);
                chatthread.start();
            } // while
        }catch(Exception e){
            System.out.println(e);
        }
    } // main
}

class ChatThread extends Thread{
    private Socket sock;
    private String id;
    private BufferedReader br;
    private HashMap hm;
    private boolean initFlag = false;
    public ChatThread(Socket sock, HashMap hm){
        this.sock = sock;
        this.hm = hm;
        try{
            PrintWriter pw = new PrintWriter(new OutputStreamWriter(sock.getOutputStream()));
            br = new BufferedReader(new InputStreamReader(sock.getInputStream()));
            id = br.readLine();
            broadcast(id + " entered.");
            Date dt = new Date();
            SimpleDateFormat sdf = new SimpleDateFormat("a hh:mm:ss");
            System.out.println(sdf.format(dt).toString());
            System.out.println("[Server] User (" + id + ") entered.");
            synchronized(hm){
                hm.put(this.id, pw);
            }
            initFlag = true;
        }catch(Exception ex){
            System.out.println(ex);
        }
    } // construcor
    public void run(){
        try{
            String line = null;
            String str = null;
            String[] word ={"바보","멍청이","병신","놈","새끼"};
            
            while((line = br.readLine()) != null){
                if(line.equals("/quit"))
                    break;
                if(line.indexOf("/to ") == 0){
                    sendmsg(line);
                }
                if((str = checkword(line, word)) != null){
                    warning(str);
                }
                if(line.equals("/userlist")){
                    System.out.println(id);
                    send_userlist(id);
                }
                if(line.equals("/spamlist")){
                    send_spamlist(id, word);
                }
                /*if(line.indexOf("/addspam ") == 0){
                 addspam(line, word);
                 }*/
                else
                    broadcast(id + " : " + line);
            }
        }catch(Exception ex){
            System.out.println(ex);
        }finally{
            synchronized(hm){
                hm.remove(id);
            }
            broadcast(id + " exited.");
            try{
                if(sock != null)
                    sock.close();
            }catch(Exception ex){}
        }
    } // run
    public void sendmsg(String msg){
        int start = msg.indexOf(" ") +1;
        int end = msg.indexOf(" ", start);
        if(end != -1){
            String to = msg.substring(start, end);
            String msg2 = msg.substring(end+1);
            Object obj = hm.get(to);
            if(obj != null){
                PrintWriter pw = (PrintWriter)obj;
                pw.println(id + " whisphered. : " + msg2);
                pw.flush();
            } // if
        }
    } // sendmsg
    // 기능 2번
    // iter.next() 의 값이 hm.get(id) 의 값과 다르면 즉, 본인이 아니면
    // broadcast 실행 (값이 같으면, 즉 본인이면 실행 x)
    public void broadcast(String msg){
        synchronized(hm){
            Collection<PrintWriter> collection = hm.values();
            Iterator<PrintWriter> iter = collection.iterator();
            while(iter.hasNext()){
                PrintWriter pw = (PrintWriter)iter.next();
                Date dt = new Date();
                SimpleDateFormat sdf = new SimpleDateFormat("a hh:mm:ss");
                pw.println(sdf.format(dt).toString());
                pw.flush();
                if(pw != hm.get(id)) {
                    pw.println(msg);
                    pw.flush();
                }
            }
        }
    } // broadcast
    // 1. run()에서 읽은 값이 /userlist 이면 send_userlist()를 호출
    // 2. keyset에 hm의 key를 불러옴
    // 3. hm의 size도 불러옴
    // 4. userlist 정보를 보낼 대상 설정
    // 5. pw 정의 후 keyset 출력 & 사용자 수도 출력
    public void send_userlist(String id){
        Set keyset = hm.keySet();
        int size = hm.size();
        Object obj = hm.get(id);
        PrintWriter pw = (PrintWriter)obj;
        pw.println(keyset);
        pw.flush();
        pw.println("user count: "+ size);
        pw.flush();
        
    }
    public String checkword(String msg, String word[]){
        int b = 1;
        //String[] word ={"바보","멍청이","병신","놈","새끼"};
        for(int i=0;i<word.length;i++){
            if(msg.contains(word[i]))
                return word[i];
        }
        return null;
    }
    public void warning(String msg){
        Object obj = hm.get(id);
        if(obj != null){
            PrintWriter pw = (PrintWriter)obj;
            pw.println("Don't use " + msg);
            pw.flush();
        }
    }
    public void send_spamlist(String id, String ban[]){
        Object obj = hm.get(id);
        if(obj != null){
            PrintWriter pw = (PrintWriter)obj;
            for(int i = 0; i < ban.length; i++){
                pw.println(ban[i]);
                pw.flush();
            }
        }
        
    }
    /*public void addspam(String msg, String ban[]){
     int start = msg.indexOf(" ") +1;
     if(start != -1){
     String plus_spam = msg.substring(start);
     // java.util.Array를 사용하여 동적배열을 시도했지만 실패
     ban = Arrays.copyOf(ban, ban.length + 1);
     ban[ban.length+1] = plus_spam;
     }
     }*/
    
}

